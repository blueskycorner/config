service: BaseConfig # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  region: us-east-1
  runtime: python3.7
  profile: hardis
  stage: ${opt:stage, 'dev'}
  stackTags:
    Application: config-test
  tags:
    Application: config-test

plugins:
  - serverless-plugin-existing-s3

custom:
  delivery-bucket-name: config-test-beh
  delivery-topic-email: benjamin.ehlers@hardis.fr
  database-name: config_snapshot
  table-name: config_snapshot

functions:
  rule1:
    handler: rule1.lambda_handler
    timeout: 5
    memorySize: 128
    role: Rule1Role
    
  athena-partitioner:
    handler: athena.partitioner
    timeout: 60
    memorySize: 1024
    role: AthenaPartitionerRole
    environment:
      DATABASE_NAME: ${self:custom.database-name}
      TABLE_NAME: ${self:custom.table-name}
    events:
      - existingS3:
          bucket: ${self:custom.delivery-bucket-name}
          events:
            - s3:ObjectCreated:*

resources:
  Resources:
    ConfigRecorder:
      Type: AWS::Config::ConfigurationRecorder
      Properties: 
        Name: default
        RecordingGroup: 
          ResourceTypes:
          - AWS::EC2::SecurityGroup
        RoleARN: !GetAtt ConfigRole.Arn

    ConfigDeliveryChannel:
      # DependsOn: ConfigRecorder
      Type: AWS::Config::DeliveryChannel
      Properties: 
        ConfigSnapshotDeliveryProperties: 
          DeliveryFrequency: TwentyFour_Hours
        # Name: ${self:service}
        S3BucketName: !Ref ConfigDeliveryBucket
        SnsTopicARN: !Ref ConfigDeliveryTopic

    ConfigDeliveryBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties: 
        AccessControl: Private
        BucketName: ${self:custom.delivery-bucket-name}

    ConfigDeliveryTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${self:service}
        Subscription: 
        - Endpoint: ${self:custom.delivery-topic-email}
          Protocol: email
        TopicName: ${self:service}

    ConfigRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - config.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: s3:GetBucketAcl
              Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigDeliveryBucket']]
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigDeliveryBucket', /AWSLogs/,
                  !Ref 'AWS::AccountId', /*]]
              Condition:
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control
            - Effect: Allow
              Action: config:Put*
              Resource: '*'
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref ConfigDeliveryTopic

    IncomingSshDisabledConfigRule:
      DependsOn: ConfigRecorder
      Type: AWS::Config::ConfigRule
      Properties:
        ConfigRuleName: ${self:provider.stage}-rules-check-incoming-ssh-disabled
        Source:
          Owner: AWS
          SourceIdentifier: INCOMING_SSH_DISABLED
        Description: 'CIS 4.1: Ensure no security groups allow ingress from 0.0.0.0/0 to port 22'
        Scope:
          ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup

    ConfigRule1:
      DependsOn: ConfigRule1Permission
      Type: AWS::Config::ConfigRule
      Properties:
        ConfigRuleName: ${self:provider.stage}-ConfigRule1
        Source:
          Owner: CUSTOM_LAMBDA
          SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
          SourceIdentifier: !GetAtt Rule1LambdaFunction.Arn
        Description: 'Ensure security groups allow ingress to port 22 from 1.1.1.1/32'
        InputParameters: '{"ipAddress":"1.1.1.1/32"}'
        Scope:
          ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
          
    Rule1Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-rule1
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
    AthenaPartitionerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-athena-partitioner
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: # Gives permission to S3
                    - s3:PutObject
                    - s3:ListBucket
                    # - s3:GetBucketNotification
                    # - s3:PutBucketNotification
                  Resource: 
                    - arn:aws:s3:::${self:custom.delivery-bucket-name}
          
    # To allow aws.config to call Rule1
    ConfigRule1Permission:
      DependsOn: ConfigRecorder
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt Rule1LambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: config.amazonaws.com

    AthenaDatabase:
      Type: AWS::Glue::Database
      Properties:
        DatabaseInput:
          Name: ${self:custom.database-name}
          Description: Config snapshot database
        CatalogId: !Ref AWS::AccountId
      
    AthenaTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName: !Ref AthenaDatabase
        CatalogId: !Ref AWS::AccountId
        TableInput:
          Name: ${self:custom.table-name}
          TableType: EXTERNAL_TABLE
          PartitionKeys:
          - Name: dt
            Type: string
          - Name: region
            Type: string
          StorageDescriptor:
            Location:
              Fn::Join:
                - ''
                -
                  - 's3://'
                  - !Ref ConfigDeliveryBucket
                  - '/AWSLogs'
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
            Columns:
              - Name: fileversion
                Type: string
              - Name: configSnapshotId
                Type: string
              - Name: configurationitems
                Type: array<struct<configurationItemVersion:string,configurationItemCaptureTime:string,configurationStateId:bigint,awsAccountId:string,configurationItemStatus:string,resourceType:string,resourceId:string,resourceName:string,ARN:string,awsRegion:string,availabilityZone:string,configurationStateMd5Hash:string,configuration:string,supplementaryConfiguration:map<string,string>,tags:map<string,string>,resourceCreationTime:string>>

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
